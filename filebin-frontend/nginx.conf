user  nginx;
worker_processes  auto;

error_log  /var/log/nginx/error.log notice;
pid        /var/run/nginx.pid;

events {
    worker_connections  1024;
}

http {
    include       /etc/nginx/mime.types;
    default_type  application/octet-stream;

    log_format  main  '$remote_addr - $remote_user [$time_local] "$request" '
                      '$status $body_bytes_sent "$http_referer" '
                      '"$http_user_agent" "$http_x_forwarded_for"';

    access_log  /var/log/nginx/access.log  main;

    sendfile        on;
    #tcp_nopush     on;

    keepalive_timeout  65;

    # Uncomment if you want gzip compression
    # gzip  on;

    server {
        listen 80;

        # Set the root directory to the React build output
        root /usr/share/nginx/html;
        index index.html;

        # Handle all routes by sending them to index.html (SPA routing)
        location / {
            try_files $uri /index.html;
        }

        # API routes proxy to the API Gateway
        location /api/ {
            proxy_pass http://api-gateway:8080/api/;
            proxy_set_header Host $host;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_set_header X-Forwarded-Proto $scheme;
            proxy_set_header Authorization $http_authorization;  # Forward Authorization header
            proxy_set_header Content-Type $http_content_type;    # Forward Content-Type header for POST requests
            proxy_set_header Accept $http_accept;
        }

        # Images route proxy to the API Gateway
        location /images/ {
            proxy_pass http://api-gateway:8080/images/;
            proxy_set_header Host $host;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_set_header X-Forwarded-Proto $scheme;
            proxy_set_header Authorization $http_authorization;
            proxy_set_header Content-Type $http_content_type;
            proxy_set_header Accept $http_accept;
        }
    }
}
